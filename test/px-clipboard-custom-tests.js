// This is the wrapper for custom tests, called upon web components ready state
function runCustomTests() {
  // Place any setup steps like variable declaration and initialization here

  // This is the placeholder suite to place custom tests in
  // Use testCase(options) for a more convenient setup of the test cases



  suite('<px-clipboard> Copy: check copy operation from input', function () {

    var pxClipboardCopy;
    var pxClipboardCopyIcon;
    var sandbox;

    setup(function () {
      pxClipboardCopy = fixture('pxClipboardCopy');
      pxClipboardCopyIcon = pxClipboardCopy.$.copy;
      sandbox = sinon.sandbox.create();
    });
    teardown(function () {
      sandbox.restore();
    });

    test('correct input element is inserted', function (done) {
      var nodesInSlot = pxClipboardCopy.getEffectiveChildren();
      assert.equal(nodesInSlot.length, 1);
      assert.equal(nodesInSlot[0].id, 'helloCopy');
      assert.equal(nodesInSlot[0].value, 'hello World Copy');
      done();
    });
    /**
     * Please note that document.execCommand, which is the command clipboard.js is using, is not
     * AVAILABLE through the console, and cannot be emulated. it MUST be clicked by a real user.
     * The following tests are written with that in mind, and are catching the error generated by
     * px-clipboard, letting us know about this.
     */
    test('check copy operation from input', function (done) {
      var callback = sinon.spy();

      flush(function () {
        pxClipboardCopy.addEventListener('pxClipboardSuccess', callback);
        pxClipboardCopy.addEventListener('pxClipboardError', callback);
        pxClipboardCopyIcon.click();
      });
      flush(function () {
        pxClipboardCopy.removeEventListener('pxClipboardSuccess', callback);
        pxClipboardCopy.removeEventListener('pxClipboardError', callback);

        assert.notEqual(pxClipboardCopy.dataClipboardAction, 'cut');
        assert.isTrue(callback.called);
        assert.equal(callback.getCall(0).args[0].detail.action, 'copy');
        assert.equal(callback.getCall(0).args[0].detail.text, 'hello World Copy');
        assert.equal(callback.getCall(0).args[0].detail.trigger, pxClipboardCopyIcon);
        done();
      });
    });
  });


  suite('<px-clipboard> Cut: check cut operation from input', function () {
    var pxClipboardCut;
    var pxClipboardCutIcon;
    var sandbox;

    setup(function () {
      pxClipboardCopy = fixture('pxClipboardCut');
      pxClipboardCopyIcon = pxClipboardCopy.$.copy;
      sandbox = sinon.sandbox.create();
    });
    teardown(function () {
      sandbox.restore();
    });

    test('correct input element is inserted', function (done) {
      var nodesInSlot = pxClipboardCopy.getEffectiveChildren();
      assert.equal(nodesInSlot.length, 1);
      assert.equal(nodesInSlot[0].id, 'helloCut');
      assert.equal(nodesInSlot[0].value, 'hello World Cut');
      done();
    });
    /**
     * Please note that document.execCommand, which is the command clipboard.js is using, is not
     * AVAILABLE through the console, and cannot be emulated. it MUST be clicked by a real user.
     * The following tests are written with that in mind, and are catching the error generated by
     * px-clipboard, letting us know about this.
     */
    test('check cut operation from input', function (done) {
      var callback = sinon.spy();

      flush(function () {
        pxClipboardCopy.addEventListener('pxClipboardSuccess', callback);
        pxClipboardCopy.addEventListener('pxClipboardError', callback);
        pxClipboardCopyIcon.click();
      });
      flush(function () {
        pxClipboardCopy.removeEventListener('pxClipboardSuccess', callback);
        pxClipboardCopy.removeEventListener('pxClipboardError', callback);

        assert.equal(pxClipboardCopy.dataClipboardAction, 'cut');
        assert.isTrue(callback.called);
        assert.equal(callback.getCall(0).args[0].detail.action, 'cut');
        assert.equal(callback.getCall(0).args[0].detail.text, 'hello World Cut');
        assert.equal(callback.getCall(0).args[0].detail.trigger, pxClipboardCopyIcon);
        done();
      });
    });

  });


  suite('<px-clipboard> Copy: check copy operation from dataClipboardText', function () {

    var pxClipboardCopy;
    var pxClipboardCopyIcon;
    var sandbox;

    setup(function () {
      pxClipboardCopy = fixture('pxClipboardText');
      pxClipboardCopyIcon = pxClipboardCopy.$.copy;
      sandbox = sinon.sandbox.create();
    });
    teardown(function () {
      sandbox.restore();
    });

    /**
     * Please note that document.execCommand, which is the command clipboard.js is using, is not
     * AVAILABLE through the console, and cannot be emulated. it MUST be clicked by a real user.
     * The following tests are written with that in mind, and are catching the error generated by
     * px-clipboard, letting us know about this.
     */
    test('check dataClipboardText is copied', function (done) {
      var callback = sinon.spy();
      flush(function () {
        pxClipboardCopy.addEventListener('pxClipboardSuccess', callback);
        pxClipboardCopy.addEventListener('pxClipboardError', callback);
        pxClipboardCopyIcon.click();
      });
      flush(function () {
        pxClipboardCopy.removeEventListener('pxClipboardSuccess', callback);
        pxClipboardCopy.removeEventListener('pxClipboardError', callback);
        assert.equal(pxClipboardCopy.dataClipboardText, 'Copy some text into the clipboard!', 'dataClipboardText exists');
        assert.notEqual(pxClipboardCopy.dataClipboardAction, 'cut');
        assert.isTrue(callback.called);
        assert.equal(callback.getCall(0).args[0].detail.action, 'copy');
        assert.equal(callback.getCall(0).args[0].detail.text, 'Copy some text into the clipboard!');
        assert.equal(callback.getCall(0).args[0].detail.trigger, pxClipboardCopyIcon);
        done();
      });
    });

  });

}
