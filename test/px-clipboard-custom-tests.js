suite('Custom Automation Tests for px-clipboard', function() {
  var clipboardCopy = Polymer.dom(document).querySelector('#copy'),
      clipboardCut = Polymer.dom(document).querySelector('#cut'),
      clipboardText = Polymer.dom(document).querySelector('#text');
  /*
  Please note that document.execCommand, which is the command clipboard.js is using, is not
  AVAILABLE through the console, and cannot be emulated. it MUST be clicked by a real user.
  The following tests are written with that in mind, and are catching the error generated by
  px-clipboard, letting us know about this.
  */
  test('check copy operation successful on copy from input', function(done){
    var copyEventReceived = false,
        listen = function(evt) {
          copyEventReceived = true;
          assert.isTrue(copyEventReceived);
          clipboardCopy.removeEventListener('pxClipboardSuccess', listen);
          clipboardCopy.removeEventListener('pxClipboardError', listen);
          done();
        },
        clipboardCopyIcon = Polymer.dom(clipboardCopy.root).querySelector('#copy');
    clipboardCopy.addEventListener('pxClipboardSuccess', listen);
    clipboardCopy.addEventListener('pxClipboardError', listen);
    clipboardCopyIcon.click();

    setTimeout(function() {
      clipboardCopy.removeEventListener('pxClipboardSuccess', listen);
      clipboardCopy.removeEventListener('pxClipboardError', listen);
      assert.isTrue(false);
      done();
    },200);
  });

  test('check cut operation successful on copy from input', function(done){
    var cutEventReceived = false,
        listen = function(evt) {
          cutEventReceived = true;
          assert.isTrue(cutEventReceived);
          clipboardCut.removeEventListener('pxClipboardSuccess', listen);
          clipboardCut.removeEventListener('pxClipboardError', listen);
          done();
        },
        clipboardCutIcon = Polymer.dom(clipboardCut.root).querySelector('#copy');
    clipboardCut.addEventListener('pxClipboardSuccess', listen);
    clipboardCut.addEventListener('pxClipboardError', listen);
    clipboardCutIcon.click();

    setTimeout(function() {
      clipboardCut.removeEventListener('pxClipboardSuccess', listen);
      clipboardCut.removeEventListener('pxClipboardError', listen);
      assert.isTrue(false);
      done();
    },200);
  });

  test('check text copy operation successful', function(done){
    var textEventReceived = false,
        listen = function(evt) {
          textEventReceived = true;
          assert.isTrue(textEventReceived);
          clipboardText.removeEventListener('pxClipboardSuccess', listen);
          clipboardText.removeEventListener('pxClipboardError', listen);
          done();
        },
        clipboardCopyTextIcon = Polymer.dom(clipboardText.root).querySelector('#copy');
    clipboardText.addEventListener('pxClipboardSuccess', listen);
    clipboardText.addEventListener('pxClipboardError', listen);
    clipboardCopyTextIcon.click();

    setTimeout(function() {
      clipboardText.removeEventListener('pxClipboardSuccess', listen);
      clipboardText.removeEventListener('pxClipboardError', listen);
      assert.isTrue(false);
      done();
    },200);
  });
});
